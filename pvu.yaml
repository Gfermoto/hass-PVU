blueprint:
  name: "Управление ПВУ Turkov с CO₂, влажностью, давлением и расписанием"
  description: |
    Автоматизация для ПВУ Turkov с поддержкой:
    - Управление по температуре, CO₂, влажности, давлению
    - Расписание дня/ночи
  domain: automation
  input:
    turkov_climate:
      name: "Устройство ПВУ Turkov"
      selector:
        entity:
          domain: climate
    temp_indoor:
      name: "Датчик температуры в помещении"
      selector:
        entity:
          domain: sensor
          device_class: temperature
    humidity_indoor:
      name: "Датчик влажности (опционально)"
      selector:
        entity:
          domain: sensor
          device_class: humidity
    pressure_sensor:
      name: "Датчик давления (опционально)"
      selector:
        entity:
          domain: sensor
          device_class: pressure
    co2_sensor:
      name: "Датчик CO₂ (опционально)"
      selector:
        entity:
          domain: sensor
          device_class: carbon_dioxide

    temp_day:
      name: "Целевая температура днем (°C)"
      default: 22
      selector:
        number:
          min: 10
          max: 30
          mode: box
    temp_night:
      name: "Целевая температура ночью (°C)"
      default: 18
      selector:
        number:
          min: 10
          max: 30
          mode: box
    co2_threshold:
      name: "Макс. уровень CO₂ (ppm)"
      default: 1000
      selector:
        number:
          min: 400
          max: 2000
          mode: box
    humidity_threshold:
      name: "Макс. влажность (%)"
      default: 70
      selector:
        number:
          min: 30
          max: 90
          mode: box

    schedule_day_start:
      name: "Начало дневного режима"
      selector:
        time:
    schedule_night_start:
      name: "Начало ночного режима"
      selector:
        time:

trigger:
  - platform: time_pattern
    hours: "/1"
  - platform: state
    entity_id: !input temp_indoor
  - platform: state
    entity_id: !input co2_sensor
  - platform: state
    entity_id: !input humidity_indoor

action:
  - variables:
      current_mode: >
        {% if now().time() >= strptime(!input schedule_day_start, "%H:%M:%S").time()
          and now().time() < strptime(!input schedule_night_start, "%H:%M:%S").time() %}
          "day"
        {% else %}
          "night"
        {% endif %}
      target_temp: "{{ temp_day if current_mode == 'day' else temp_night }}"

  - choose:
      - conditions: "{{ states(temp_indoor) | float > target_temp + 1 }}"
        sequence:
          - service: climate.set_hvac_mode
            target: {entity_id: !input turkov_climate}
            data: {hvac_mode: "cool"}

      - conditions: "{{ states(temp_indoor) | float < target_temp - 1 }}"
        sequence:
          - service: climate.set_hvac_mode
            target: {entity_id: !input turkov_climate}
            data: {hvac_mode: "heat"}

      - conditions: "{{ co2_sensor and states(co2_sensor) | int > co2_threshold }}"
        sequence:
          - service: fan.set_speed
            target: {entity_id: !input turkov_climate}
            data: {speed: "high"}

      - conditions: "{{ humidity_indoor and states(humidity_indoor) | float > humidity_threshold }}"
        sequence:
          - service: climate.set_hvac_mode
            target: {entity_id: !input turkov_climate}
            data: {hvac_mode: "dry"}

    default: []
